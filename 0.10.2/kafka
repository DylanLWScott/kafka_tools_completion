_kafka_complete()
{
  local cur prev

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  
  tools=(org.apache.kafka.tools.VerifiableProducer kafka.admin.ReassignPartitionsCommand kafka.admin.AclCommand kafka.admin.ConfigCommand kafka.admin.ConsumerGroupCommand kafka.admin.PreferredReplicaLeaderElectionCommand kafka.admin.TopicCommand kafka.admin.ZkSecurityMigrator kafka.Kafka org.apache.kafka.connect.cli.ConnectDistributed org.apache.kafka.connect.cli.ConnectStandalone kafka.tools.ConsoleConsumer kafka.tools.ConsoleProducer kafka.tools.ConsumerOffsetChecker kafka.tools.ConsumerPerformance kafka.tools.DumpLogSegments kafka.tools.ExportZkOffsets kafka.tools.GetOffsetShell kafka.tools.ImportZkOffsets kafka.tools.JmxTool kafka.tools.MirrorMaker kafka.tools.PerfConfig kafka.tools.ProducerPerformance kafka.tools.ReplayLogProducer kafka.tools.ReplicaVerificationTool kafka.tools.SimpleConsumerPerformance kafka.tools.SimpleConsumerShell kafka.tools.EndToEndLatency kafka.tools.StreamsResetter kafka.tools.UpdateOffsetsInZK kafka.tools.ZooKeeperMainWrapper org.apache.kafka.connect.cli.ConnectDistributed org.apache.kafka.connect.cli.ConnecStandalone org.apache.kafka.tools.ProducerPerformance org.apache.kafka.tools.VerifiableConsumer  rg.apache.kafka.tools.VerifiableProducer)

  if [ $COMP_CWORD -eq 1 ]; then
    COMPREPLY=( $(compgen -W "$(echo ${tools[*]})" $cur) )
  elif [ $COMP_CWORD -eq 2 ]; then
    case "$prev" in
      "kafka.tools.ConsoleConsumer")
        COMPREPLY=( $(compgen -W "--topic --whitelist --blacklist --partition --offset --zookeeper --consumer-property --consumer.config --formatter --property --delete-consumer-offsets --from-beginning --max-messages --timeout-ms --skip-message-on-error --csv-reporter-enabled --metrics-dir --new-consumer --bootstrap-server --key-deserializer --value-deserializer --enable-systest-events" -- $cur) )
        ;;
      "kafka.tools.ConsoleProducer")
        COMPREPLY=( $(compgen -W "--topic --broker-list --sync --compression-codec --batch-size --message-send-max-retries --retry-backoff-ms --timeout --queue-size --queue-enqueuetimeout-ms --request-required-acks --request-timeout-ms --metadata-expiry-ms --max-block-ms --max-memory-bytes --max-partition-memory-bytes --value-serializer --key-serializer --line-reader --socket-buffer-size --property --producer-property --producer.config --old-producer" -- $cur) )
        ;;
      "kafka.tools.ConsumerOffsetChecker")
        COMPREPLY=( $(compgen -W "--zookeeper --topic --group --socket.timeout.ms --retry.backoff.ms --broker-info --help" -- $cur) )
        ;;
      "kafka.tools.ConsumerPerformance")
        COMPREPLY=( $(compgen -W "--zookeeper --broker-list --topic --group --fetch-size --from-latest --socket-buffer-size --threads --num-fetch-threads --new-consumer --consumer.config" -- $cur) )
        ;;
      "kafka.tools.DumpLogSegments")
        COMPREPLY=( $(compgen -W "--print-data-log --verify-index-only --index-sanity-check --files --max-message-size --deep-iteration --value-decoder-class --key-decoder-class --offsets-decoder" -- $cur) )
        ;;
      "kafka.tools.ExportZkOffsets")
        COMPREPLY=( $(compgen -W "--zkconnect --group --output-file --help" -- $cur) )
        ;;
      "kafka.tools.GetOffsetShell")
        COMPREPLY=( $(compgen -W "--broker-list --topic --partitions --time --offsets --max-wait-ms" -- $cur) )
        ;;
      "kafka.tools.ImportZkOffsets")
        COMPREPLY=( $(compgen -W "--zkconnect --input-file --help" -- $cur) )
        ;;
      "kafka.tools.JmxTool")
        COMPREPLY=( $(compgen -W "--object-name --attributes --reporting-interval --help --date-format --jmx-url" -- $cur) )
        ;;
      "kafka.tools.MirrorMaker")
        COMPREPLY=( $(compgen -W "--consumer.config --new.consumer --producer.config --num.streams --whitelist --blacklist --offset.commit.interval.ms --consumer.rebalance.listener --rebalance.listener.args message.handler --message.handler.args --abort.on.send.failure --help" -- $cur) )
        ;; 
      "kafka.tools.PerfConfig")
        COMPREPLY=( $(compgen -W "--messages --reporting-interval --date-format --show-detailed-stats --hide-header --message-size --batch-size --compression-codec --help" -- $cur) )
        ;;
       "kafka.tools.ProducerPerformance")
        COMPREPLY=( $(compgen -W "--broker-list --producer.config --topics --request-timeout-ms --producer-num-retries --producer-retry-backoff-ms --request-num-acks --vary-message-size --sync --threads --initial-message-id --message-send-gap-ms --csv-reporter-enabled --metrics-dir --new-producer" -- $cur) )
        ;;
       "kafka.tools.ReplayLogProducer")
        COMPREPLY=( $(compgen -W "--zookeeper --broker-list --inputtopic --outputtopic --messages --threads --reporting-interval --property --sync" -- $cur) )
        ;;
       "kafka.tools.ReplicaVerificationTool")
        COMPREPLY=( $(compgen -W "--broker-list --fetch-size --max-wait-ms --topic-white-list --time --report-interval-ms" -- $cur) )
        ;;
       "kafka.tools.SimpleConsumerPerformance")
        COMPREPLY=( $(compgen -W "--server --topic --from-latest --partition --fetch-size --clientId" -- $cur) )
        ;;
       "kafka.tools.SimpleConsumerShell")
        COMPREPLY=( $(compgen -W "--broker-list --topic --partition --replica --offset --clientId --fetchsize --formatter --property --print-offsets --max-wait-ms --max-messages --skip-message-on-error --no-wait-at-logend" -- $cur) )
        ;; 
       "kafka.tools.StateChangeLogMerger")
        COMPREPLY=( $(compgen -W "--logs --logs-regex --topic --partitions --start-time --end-time" -- $cur) )
        ;; 
       "kafka.tools.VerifyConsumerRebalance")
        COMPREPLY=( $(compgen -W "--zookeeper.connect --group --help" -- $cur) )
        ;; 
       "kafka.tools.EndToEndLatency")
        COMPREPLY=( $(compgen -W "--broker_list --topic --num_messages --producer_acks --message_size_bytes --properties_file" -- $cur) )
        ;; 
       "kafka.tools.StreamsResetter")
        COMPREPLY=( $(compgen -W "--application-id --bootstrap-servers --zookeeper --input-topics --intermediate-topics" -- $cur) )
        ;; 
       "kafka.tools.UpdateOffsetsInZK")
        COMPREPLY=( $(compgen -W "--earliest --latest --consumer.properties --topic" -- $cur) )
        ;;  
        "kafka.tools.ZooKeeperMainWrapper")
        COMPREPLY=( $(compgen -W "-server -timeout" -- $cur) )
        ;; 
        "kafka.admin.AclCommand")
        COMPREPLY=( $(compgen -W "--authorizer --authorizer-properties --topic --cluster --group --add --remove --list --operation --allow-principal --deny-principal --allow-host --deny-host --producer --consumer --help --force" -- $cur) )
        ;;
        "kafka.admin.ConfigCommand")
        COMPREPLY=( $(compgen -W "--zookeeper --alter --describe --entity-type --entity-name --entity-default --add-config --delete-config --help --force" -- $cur) )
        ;;  
        "kafka.admin.ConsumerGroupCommand")
        COMPREPLY=( $(compgen -W "--zookeeper --bootstrap-server --group --topic --list --describe --delete --new-consumer --command-config" -- $cur) )
        ;; 
        "kafka.admin.PreferredReplicaLeaderElectionCommand")
        COMPREPLY=( $(compgen -W "--path-to-json-file --zookeeper" -- $cur) )
        ;;    
        "kafka.admin.ReassignPartitionsCommand")
        COMPREPLY=( $(compgen -W "--zookeeper --generate --execute --verify --reassignment-json-file --topics-to-move-json-file --broker-list --disable-rack-aware --throttle" -- $cur) )
        ;; 
        "kafka.admin.TopicCommand")
        COMPREPLY=( $(compgen -W "--zookeeper --list --create --delete --alter --describe --help --topic --config --delete-config --partitions --replication-factor --replica-assignment --under-replicated-partitions --unavailable-partitions --topics-with-overrides --if-exists --if-not-exists --disable-rack-aware --force" -- $cur) )
        ;; 
        "kafka.admin.ZkSecurityMigrator")
        COMPREPLY=( $(compgen -W "--zookeeper.acl --zookeeper.connect --zookeeper.session.timeout --zookeeper.connection.timeout --help" -- $cur) )
        ;; 
        "kafka.Kafka")
        COMPREPLY=( $(compgen -W "--override" -- $cur) )
        ;;   
        "org.apache.kafka.connect.cli.ConnectDistributed")
        COMPREPLY=( $(compgen -W "-daemon" -- $cur) )
        ;; 
        "org.apache.kafka.connect.cli.ConnectStandalone")
        COMPREPLY=( $(compgen -W "-daemon" -- $cur) )
        ;;   
        "org.apache.kafka.tools.ProducerPerformance")
        COMPREPLY=( $(compgen -W "topic_name num_records record_size target_records_sec" -- $cur) )
        ;;   
        "org.apache.kafka.tools.VerifiableConsumer")
        COMPREPLY=( $(compgen -W "--broker-list --topic --group-id --max-messages --session-timeout --verbose --eanble-autocommit --reset-policy --assignment-strategy --consumer-config" -- $cur) )
        ;;  
        "org.apache.kafka.tools.VerifiableProducer")
        COMPREPLY=( $(compgen -W "--topic --broker-list --max-messages --throughput --acks --producer.config --value.prefix" -- $cur) )
        ;;          
      *)
        ;;
    esac
  fi

  return 0
} &&
complete -F _kafka_complete kafka-run-class.sh

_connect-distributed() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-daemon"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _connect-distributed connect-distributed

_connect-standalone() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-daemon"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _connect-standalone connect-standalone

_kafka-acls() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--authorizer --authorizer-properties --topic --cluster --group --add --remove --list --operation --allow-principal --deny-principal --allow-host --deny-host --producer --consumer --help --force"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-acls kafka-acls

_kafka-configs() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--zookeeper --alter --describe --entity-type --entity-name --entity-default --add-config --delete-config --help --force"
    
    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-configs kafka-configs

_kafka-console-consumer() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="---topic --whitelist --blacklist --partition --offset --zookeeper --consumer-property --consumer.config --formatter --property --delete-consumer-offsets --from-beginning --max-messages --timeout-ms --skip-message-on-error --csv-reporter-enabled --metrics-dir --new-consumer --bootstrap-server --key-deserializer --value-deserializer --enable-systest-events"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-console-consumer kafka-console-consumer

_kafka-console-producer() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--topic --broker-list --sync --compression-codec --batch-size --message-send-max-retries --retry-backoff-ms --timeout --queue-size --queue-enqueuetimeout-ms --request-required-acks --request-timeout-ms --metadata-expiry-ms --max-block-ms --max-memory-bytes --max-partition-memory-bytes --value-serializer --key-serializer --line-reader --socket-buffer-size --property --producer-property --producer.config --old-producer"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-console-producer kafka-console-producer

_kafka-consumer-groups() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--zookeeper --bootstrap-server --group --topic --list --describe --delete --new-consumer --command-config"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-consumer-groups kafka-consumer-groups

_kafka-consumer-offset-checker() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--zookeeper --topic --group --socket.timeout.ms --retry.backoff.ms --broker-info --help"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-consumer-offset-checker kafka-consumer-offset-checker

_kafka-consumer-perf-test() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--zookeeper --broker-list --topic --group --fetch-size --from-latest --socket-buffer-size --threads --num-fetch-threads --new-consumer --consumer.config"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-consumer-perf-test kafka-consumer-perf-test

_kafka-mirror-maker() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--consumer.config --new.consumer --producer.config --num.streams --whitelist --blacklist --offset.commit.interval.ms --consumer.rebalance.listener --rebalance.listener.args message.handler --message.handler.args --abort.on.send.failure --help"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-mirror-maker kafka-mirror-maker

_kafka-preferred-replica-election() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--path-to-json-file --zookeeper"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-preferred-replica-election kafka-preferred-replica-election

_kafka-producer-perf-test() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="topic_name num_records record_size target_records_sec"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-producer-perf-test kafka-producer-perf-test

_kafka-reassign-partitions() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--zookeeper --generate --execute --verify --reassignment-json-file --topics-to-move-json-file --broker-list --disable-rack-aware --throttle"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-reassign-partitions kafka-reassign-partitions

_kafka-replay-log-producer() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--zookeeper --broker-list --inputtopic --outputtopic --messages --threads --reporting-interval --property --sync"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-replay-log-producer kafka-replay-log-producer

_kafka-replica-verification() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--broker-list --fetch-size --max-wait-ms --topic-white-list --time --report-interval-ms"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-replica-verification kafka-replica-verification

_kafka-run-class() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-daemon -name -loggc"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-run-class kafka-run-class

_kafka-server-start() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-daemon --override"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-server-start kafka-server-start

_kafka-server-stop() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=""

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-server-stop kafka-server-stop

_kafka-simple-consumer-shell() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="---broker-list --topic --partition --replica --offset --clientId --fetchsize --formatter --property --print-offsets --max-wait-ms --max-messages --skip-message-on-error --no-wait-at-logend"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-simple-consumer-shell kafka-simple-consumer-shell

_kafka-streams-application-reset() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--help --verbose --version"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-streams-application-reset kafka-streams-application-reset

_kafka-topics() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--help --verbose --version"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-topics kafka-topics

_kafka-verifiable-consumer() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--help --verbose --version"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-verifiable-consumer kafka-verifiable-consumer

_kafka-verifiable-producer() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--topic --broker-list --max-messages --throughput --acks --producer.config --value.prefix"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kafka-verifiable-producer kafka-verifiable-producer

_zookeeper-security-migration() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--zookeeper.acl --zookeeper.connect --zookeeper.session.timeout --zookeeper.connection.timeout --help"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _zookeeper-security-migration zookeeper-security-migration

_zookeeper-server-start() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-daemon"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _zookeeper-server-start zookeeper-server-start

_zookeeper-server-stop() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=""

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _zookeeper-server-stop zookeeper-server-stop

_zookeeper-shell() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=""

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _zookeeper-shell zookeeper-shell
